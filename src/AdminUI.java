
import java.awt.Event;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sina
 */
public class AdminUI extends javax.swing.JFrame {
    InsuranceCompany company;
    Login login;
    

    /**
     * Creates new form AdminUI
     */
    public AdminUI(InsuranceCompany company, Login login) {
        this.company = company;
        this.login = login;
        initComponents();
        setTitle("Car Insurance Company: " + company.getName() + " (Admin UI)");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cityReportTable = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        carModelReportTable = new javax.swing.JTable();
        reportCompany = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportTextArea = new javax.swing.JTextArea();
        usersComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        showUserUIButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();
        filterPoliciesTab = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        policySortTable = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        carModelFilterField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        expiryDateFilterField = new javax.swing.JTextField();
        filterByDateButton = new javax.swing.JButton();
        sortByHolderNameCheckBox = new javax.swing.JCheckBox();
        jLabel23 = new javax.swing.JLabel();
        usersComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cityReportTable.setModel(fillCityTableData());
        jScrollPane1.setViewportView(cityReportTable);
        if (cityReportTable.getColumnModel().getColumnCount() > 0) {
            cityReportTable.getColumnModel().getColumn(0).setResizable(false);
            cityReportTable.getColumnModel().getColumn(1).setResizable(false);
            cityReportTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel24.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel24.setText("City Report");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel25.setText("Car Model Report");

        carModelReportTable.setModel(fillCarModelTableData());
        jScrollPane2.setViewportView(carModelReportTable);
        if (carModelReportTable.getColumnModel().getColumnCount() > 0) {
            carModelReportTable.getColumnModel().getColumn(0).setResizable(false);
            carModelReportTable.getColumnModel().getColumn(1).setResizable(false);
            carModelReportTable.getColumnModel().getColumn(2).setResizable(false);
        }

        reportCompany.setText("Report");
        reportCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportCompanyActionPerformed(evt);
            }
        });

        reportTextArea.setColumns(20);
        reportTextArea.setLineWrap(true);
        reportTextArea.setRows(5);
        reportTextArea.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        reportTextArea.setEnabled(false);
        jScrollPane3.setViewportView(reportTextArea);

        usersComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(getUsersComboBoxOptions()));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(usersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportCompany)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportCompany)
                    .addComponent(usersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        reportCompany.getAccessibleContext().setAccessibleName("Report");

        jTabbedPane1.addTab("Report", jPanel1);

        usersTable.setModel(fillUsersTableData());
        jScrollPane4.setViewportView(usersTable);

        showUserUIButton.setText("Show Users' UI");
        showUserUIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserUIButtonActionPerformed(evt);
            }
        });

        deleteUserButton.setText("Delete");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(showUserUIButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteUserButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showUserUIButton)
                    .addComponent(deleteUserButton))
                .addContainerGap(209, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Users", jPanel2);

        policySortTable.setModel(fillPolicyTableData(company.allPolicies(company.getAdminUsername(), company.getAdminPassword()).values(), null));
        policySortTable.setInheritsPopupMenu(true);
        jScrollPane5.setViewportView(policySortTable);

        jLabel21.setText("Car Model");

        carModelFilterField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                carModelFilterFieldKeyReleased(evt);
            }
        });

        jLabel22.setText("Expiry Date");

        filterByDateButton.setText("Filter by Date");
        filterByDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByDateButtonActionPerformed(evt);
            }
        });

        sortByHolderNameCheckBox.setText("Sort by HolderName");
        sortByHolderNameCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByHolderNameCheckBoxActionPerformed(evt);
            }
        });

        jLabel23.setText("User");

        usersComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(getUsersComboBoxOptions()));
        usersComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPoliciesTabLayout = new javax.swing.GroupLayout(filterPoliciesTab);
        filterPoliciesTab.setLayout(filterPoliciesTabLayout);
        filterPoliciesTabLayout.setHorizontalGroup(
            filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE))
                    .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                        .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(8, 8, 8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPoliciesTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usersComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(carModelFilterField, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(expiryDateFilterField))
                        .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filterByDateButton))
                            .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(sortByHolderNameCheckBox)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        filterPoliciesTabLayout.setVerticalGroup(
            filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPoliciesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(carModelFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortByHolderNameCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(expiryDateFilterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterByDateButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPoliciesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usersComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Filter Policies", filterPoliciesTab);

        jMenu1.setText("Logout");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
                                        
    private DefaultTableModel fillPolicyTableData(Collection<InsurancePolicy> policies, JTable table) {
        String[] headers = new String[] { "Policy ID", "Holder Name", "Car Model", "Car Type", "Car Price", "Manufacury Year", "Number of Claims", "Driver Age", "Level", "Total Price", "Comments", "Expiry Date" };
        DefaultTableModel model = new DefaultTableModel(headers, 0) {
            Class[] types = new Class[] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        if (table != null) table.setModel(model);
        for (InsurancePolicy policy : policies) {
            ArrayList<Object> row = new ArrayList<>();
            row.add(policy.getId());
            row.add(policy.getPolicyHolderName());
            row.add(policy.getCar().getModel());
            row.add(policy.getCar().getType().name());
            row.add(policy.getCar().getPrice());
            row.add(policy.getCar().getManufacturingYear());
            row.add(policy.getNumberOfClaims());
            row.add(policy instanceof ComprehensivePolicy ? (((ComprehensivePolicy) policy).getDriverAge()) : "NA");
            row.add(policy instanceof ComprehensivePolicy ? (((ComprehensivePolicy) policy).getLevel()) : "NA");
            row.add(policy.calcPayment(company.getFlatRate()));
            row.add(policy instanceof ThirdPartyPolicy ? (((ThirdPartyPolicy) policy).getComments()) : "NA");
            row.add(policy.getExpiryDate().toString());
            model.addRow(row.toArray());
        }
        return model;
    }                    
    
    private DefaultTableModel fillUsersTableData() {
        String[] headers = new String[] { "ID", "Name", "Password", "Policies Count", "Total Payment", "City", "Suburb", "Street", "Street No." };
        DefaultTableModel model = new DefaultTableModel(headers, 0) {
            Class[] types = new Class[] {
                Integer.class, String.class, String.class, Integer.class, Double.class, String.class, String.class, String.class, Integer.class
            };
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        for (User user : company.getUsers().values()) {
            ArrayList<Object> row = new ArrayList<>();
            row.add(user.getUserID());
            row.add(user.getName());
            row.add(user.getPassword());
            row.add(user.getPolicies().size());
            row.add(user.calcTotalPayments(user.getUserID(), user.getPassword(), company.getFlatRate()));
            row.add(user.getAddress().getCity());
            row.add(user.getAddress().getSuburb());
            row.add(user.getAddress().getStreet());
            row.add(user.getAddress().getStreetNum());
            model.addRow(row.toArray());
        }
        return model;
    }
    
    
    
    private void filterPolicies() {
        try {
            ArrayList<InsurancePolicy> policies = new ArrayList<>();
            String selectedUserId = (String) usersComboBox1.getSelectedItem();
            if (selectedUserId.equals("All Users")) {
                policies = new ArrayList<>(company.allPolicies(company.getAdminUsername(), company.getAdminPassword()).values());
            } else {
                User user = company.findUser(company.getAdminUsername(), company.getAdminPassword(), Integer.parseInt(selectedUserId.split(":")[1]));
                policies = new ArrayList<>(user.getPolicies().values());
            }
            String carModel = carModelFilterField.getText();
            if (!carModel.isEmpty()) {
                policies = new ArrayList<>(InsurancePolicy.filterByCarModel(policies, carModel));
            }
            String expiryDateText = expiryDateFilterField.getText();
            if (!expiryDateText.isEmpty()) {
                String[] splitedDateText = expiryDateText.split("/");
                if (splitedDateText.length != 3) throw new Exception("Invalid Expiry Date! Format should be year/month/day");
                Integer year = safeGetInputInteger(splitedDateText[0]);
                Integer month = safeGetInputInteger(splitedDateText[1]);
                Integer day = safeGetInputInteger(splitedDateText[2]);
                if (year == null) throw new Exception("Expiry year should be a number and greater than Zero!");
                if (month == null) throw new Exception("Expiry month should be a number and greater than Zero!");
                if (day == null) throw new Exception("Expiry day should be a number and greater than Zero!");
                MyDate expiryDate = MyDate.createValidDate(year, month, day);
                policies = new ArrayList<>(InsurancePolicy.filterByExpiryDate(policies, expiryDate));
            }
            if (sortByHolderNameCheckBox.isSelected()) {
                // ArrayList<InsurancePolicy> sortedPolicies = new ArrayList<>(policies.values());
                Collections.sort(policies);
            }
            fillPolicyTableData(policies, policySortTable);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private DefaultTableModel fillCityTableData() {
        String[] headers = new String[] { "City", "No. of Users", "Total Payment" };
        DefaultTableModel model = new DefaultTableModel(headers, 0) {
            Class[] types = new Class[] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        
        HashMap<String, Double> totalPremiumPerCity = company.getTotalPremiumPerCity(company.getAdminUsername(), company.getAdminPassword());
        HashMap<String, ArrayList<User>> usersPerCity = company.getUsersPerCity(company.getAdminUsername(), company.getAdminPassword());
        for (String city : usersPerCity.keySet()) {
            ArrayList<Object> row = new ArrayList<>();
            row.add(city);
            row.add(usersPerCity.get(city).size());
            row.add(totalPremiumPerCity.get(city));
            model.addRow(row.toArray());
        }
        
        return model;
    }
    
    private Integer safeGetInputInteger(String value) {
        try {
            int number = Integer.parseInt(value);
            if (number < 0) throw new Exception();
            return number;
        } catch (Exception e) {
            return null;
        }
    } 
    
    private DefaultTableModel fillCarModelTableData() {
        String[] headers = new String[] { "Car Model", "No. of Users", "Total Payment", "Avg." };
        DefaultTableModel model = new DefaultTableModel(headers, 0) {
            Class[] types = new Class[] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        };
        
        HashMap<String, Double> totalPremiumPerCarModel = company.getTotalPremiumPerCarModel(company.getAdminUsername(), company.getAdminPassword());
        HashMap<String, Integer> usersPerCity = company.getTotalCountPerCarModel(company.getAdminUsername(), company.getAdminPassword());
        for (String carModel : usersPerCity.keySet()) {
            ArrayList<Object> row = new ArrayList<>();
            row.add(carModel);
            row.add(usersPerCity.get(carModel));
            row.add(totalPremiumPerCarModel.get(carModel));
            row.add(totalPremiumPerCarModel.get(carModel)/usersPerCity.get(carModel));
            model.addRow(row.toArray());
        }
        
        return model;
    }
    
    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        if (JOptionPane.showConfirmDialog(rootPane, "Are you sure?", "Logout", JOptionPane.WARNING_MESSAGE) == JOptionPane.OK_OPTION) {
            dispose();
            login.setVisible(true);
        }
    }//GEN-LAST:event_jMenu1MouseClicked

    private void reportCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportCompanyActionPerformed
        String selectedUserId = (String) usersComboBox.getSelectedItem();
        if (selectedUserId.equals("All Users")) {
            reportTextArea.append(company.toString());
        } else {
            User user = company.findUser(company.getAdminUsername(), company.getAdminPassword(), Integer.parseInt(selectedUserId.split(":")[1]));
            reportTextArea.setText(user.toString());
        }
        
    }//GEN-LAST:event_reportCompanyActionPerformed

    private void carModelFilterFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_carModelFilterFieldKeyReleased
        filterPolicies();
    }//GEN-LAST:event_carModelFilterFieldKeyReleased

    private void filterByDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterByDateButtonActionPerformed
        filterPolicies();
    }//GEN-LAST:event_filterByDateButtonActionPerformed

    private void sortByHolderNameCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByHolderNameCheckBoxActionPerformed
        filterPolicies();
    }//GEN-LAST:event_sortByHolderNameCheckBoxActionPerformed

    private void usersComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersComboBox1ActionPerformed
        filterPolicies();
    }//GEN-LAST:event_usersComboBox1ActionPerformed

    private void showUserUIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserUIButtonActionPerformed
        if (usersTable.getSelectedRows().length > 0) {
            for (int rowIndex : usersTable.getSelectedRows()) {
                User selectedUser = company.getUsers().get(
                    ((User) company.getUsers().values().toArray()[rowIndex]).getUserID()
                );
                ArrayList<String> cities = company.populateDistinctCityNames(company.getAdminUsername(), company.getAdminPassword());
                new UserUI(selectedUser, cities, company.getFlatRate(), null).setVisible(true);
            }
        }
    }//GEN-LAST:event_showUserUIButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
        if (usersTable.getSelectedRows().length > 0) {
            if (JOptionPane.showConfirmDialog(rootPane, "Are you sure you wanna delete " + usersTable.getSelectedRows().length + " selected user?", "Delete User", JOptionPane.WARNING_MESSAGE) == JOptionPane.OK_OPTION) {
                for (int rowIndex : usersTable.getSelectedRows()) {
                    User selectedUser = company.getUsers().get(
                        ((User) company.getUsers().values().toArray()[rowIndex]).getUserID()
                    );
                    company.removeUser(company.getAdminUsername(), company.getAdminPassword(), selectedUser);
                    ((DefaultTableModel) usersTable.getModel()).removeRow(rowIndex);
                }
                fillUsersTableData();
            }
        }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private String[] getUsersComboBoxOptions() {
        ArrayList<String> items = new ArrayList<>();
        items.add("All Users");
        company.getUsers().values().stream()
            .forEach(user -> items.add(user.getName() + ":" + user.getUserID()));
        return (String[]) items.toArray(new String[0]);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField carModelFilterField;
    private javax.swing.JTable carModelReportTable;
    private javax.swing.JTable cityReportTable;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JTextField expiryDateFilterField;
    private javax.swing.JButton filterByDateButton;
    private javax.swing.JPanel filterPoliciesTab;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable policySortTable;
    private javax.swing.JButton reportCompany;
    private javax.swing.JTextArea reportTextArea;
    private javax.swing.JButton showUserUIButton;
    private javax.swing.JCheckBox sortByHolderNameCheckBox;
    private javax.swing.JComboBox<String> usersComboBox;
    private javax.swing.JComboBox<String> usersComboBox1;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
